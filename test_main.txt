import plotly
from plotly.tools import FigureFactory as FF
from plotly.graph_objs import *
import numpy as np


k = 1/(4*np.pi*8.86e-12)

#Charge arrays
def spericalcharge(centre, charge, radius, num):
    Charges = []
    base_charge = charge / num
    for i in range(num):
        r = np.sqrt(np.random.uniform())
        theta = np.random.uniform(high=2*np.pi)
        Charges.append(((r*np.cos(theta),r*np.sin(theta)),base_charge,""))
    return Charges


Charges=spericalcharge(centre = (0,0), charge = 2, radius = 2, num = 200)



"""[
            ((-1,0),1,"A"),
            ((1,0),-1,"B")
         ]"""

# Create base datas
x = np.linspace(-3, 3, 100)
y = np.linspace(-3, 3, 100)
X, Y = np.meshgrid(x, y)
data_shape=X.shape
#createw zero fields
E_x = np.zeros(data_shape)
E_y = np.zeros(data_shape) #all separate
P = np.zeros(data_shape)
#adding fields
for charge in Charges:
    Dx = X - charge[0][0]
    Dy = Y - charge[0][1]
    D = np.sqrt(Dx**2 + Dy**2)
    cP = k * charge[1] / D
    #field
    E = cP / D
    E_x += E * Dx / D
    E_y += E * Dy / D
    #potential
    P += cP

#remove nans values
E_x = np.nan_to_num(E_x)
E_y = np.nan_to_num(E_y)
P = np.nan_to_num(P)

# Create streamline figure
fig = FF.create_streamline(x, y, E_x, E_y, arrow_scale=.1, density = 2.5, name="Electrical field" )
# Add source points
for charge in Charges:
    source_point = Scatter(x=[charge[0][0]], y=[charge[0][1]],
                          mode='markers',
                          marker=Marker(size=5),
                          name='{0}: {1} C'.format(charge[2], charge[1]))
    # Add source point to figure
    fig['data'].append(source_point)

fig['data'].append(Contour(x=x, y=y, z=P,
                           contours=dict(
                                coloring='heatmap'
                           ),
                           colorbar=dict(
                                thickness=25,
                                thicknessmode='pixels',
                                len=0.5,
                                lenmode='fraction',
                                outlinewidth=0,
                                ticksuffix = "V"
                            )))
# Plot
plotly.offline.plot(fig, filename='Streamline Plot Example.html')